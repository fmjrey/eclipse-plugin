/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * This buildfile is used to build a complete distribution archive of the gradle eclipse feature
 * The gradle eclipse feature contains two eclipse plugins:
 * 1. org.codehaus.gradle
 *	This plugin wraps a complete gradle distribution in a eclipse/osgi plugin and exports the gradle libs in its manifest to be
 *	reused by other osgi plugins
 *
 * 2. org.gradle.eclipse
 *	This plugin contains all logic, extension points and implementations to extend the eclipse ide.
 *	By default it imports the gradle-api exported via org.codehaus.gradle
 *
 * To build this gradle eclipse plugin the following steps should be implemented in this build file:
 *	1. copy org.codehaus.gradle and org.gradle.eclipse to a build working directory.
	2. resolve a matching gradle distribution and merge it into the org.codehaus.gradle plugin skeleton.
	3. update the import/export statements in the osgi manifests of org.gradle.eclipse and org.codehaus.gradle
	4. resolve a eclipse distribution to run the pde build (actual we're using eclipse-sdk-3.5.2)
	4. run the pde build to
		- build a valid eclipse plugin archive
		- create a update site
		- run tests
 */

apply plugin:'FeaturePde'

task wrapper(type: Wrapper) {
	gradleVersion = '0.9.1'
}

buildscript {
    repositories {
		add(new org.apache.ivy.plugins.resolver.URLResolver()) {
			name = 'pdePluginRepo'
			addArtifactPattern('https://github.com/breskeby/gradleplugins/raw/gradle-eplugin-build/pdePlugin/dists/[artifact]-[revision](-[classifier])(.[ext])')
		}
	}
	dependencies {
		classpath ':pdePlugin:5.0'
	}
}

subprojects {

	repositories {
		addFirst(new org.apache.ivy.plugins.resolver.FileSystemResolver()) {
	        name = 'repo'
	        addIvyPattern "$eclipseLocation/plugins/[organisation].[module]-ivy-[revision].xml"
	        addArtifactPattern "$eclipseLocation/plugins/[organisation].[module]_[revision](-[classifier]).[ext]"
	        descriptor = 'optional'
	        checkmodified = true
		}
	}

 	group = 'org.gradle'
	apply plugin:'java'
    plugins.withType(JavaPlugin).whenPluginAdded {
        sourceCompatibility = 1.5
        targetCompatibility = 1.5
    }

    version = this.version
}

if(!hasProperty('eclipseLocation')){
	throw (new InvalidUserDataException("The property 'eclipseLocation' not set. Use -PeclipseLocation=/Path/to/eclipse or set it in the gradle.properties file"))
}



configure(FeaturePde){
	def projectDir = getRootDir()
	featureName = "org.gradle.eclipse.feature"
	envConfigs = "*, *, *"
	buildDirectory = file("build/tmp/")
	publishDirectory = "${projectDir}/build/tmp/publish"
	pluginsSrcDirList = ["${projectDir}/build/tmp/plugins"]
	featuresSrcDir = "${projectDir}/build/tmp/features"
	builderDir = "${projectDir}/build/tmp"
	buildId = "graclipse"
	baseLocation = eclipseLocation
	eclipseLocation = "${baseLocation}"
	eclipseLauncher = "${baseLocation}"
	equinoxLauncher="${baseLocation}/plugins/org.eclipse.equinox.launcher"
	equinoxLauncherPluginVersion = "1.1.0.v20100507"
	pdeBuildPluginVersion = "3.6.1.R36x_v20100823"
}

//util methods
String createBundleClasspath(FileTree zipContent, suffix="", String prefix="", removeLastSuffix=true){

	StringBuffer buffer = new StringBuffer();
	zipContent.visit {node ->
		if(node.toString().endsWith("jar")){
			def filepath = node.relativePath.pathString
			def bundleClasspathEntry = filepath.substring(filepath.indexOf('/') + 1)
			buffer.append(prefix).append(bundleClasspathEntry).append(suffix)
		}
	}
	def bundleClasspath = buffer.toString()

	//remove the last suffix
	removeLastSuffix ? bundleClasspath.substring(0, bundleClasspath.length() - suffix.length()) : bundleClasspath
}
//

repositories {
	// get the latest available gradle snapshot. Are files resolved via URLResolver are cacheable?
	add(new org.apache.ivy.plugins.resolver.URLResolver()) {
		name = 'gradle-dists'
		addArtifactPattern 'http://gradle.artifactoryonline.com/gradle/distributions/[artifact](-[revision])(-[classifier]).[ext]'
	}
	add(new org.apache.ivy.plugins.resolver.URLResolver()) {
		name = 'gradle-snapshots'
		addArtifactPattern 'http://snapshots.dist.codehaus.org/([organization]/)[artifact](-[revision])(-[classifier]).[ext]'
	}
}

configurations {
	workspaceSetup // the configuration to build a complete pde environment workspace including a valid gradle dist
}

dependencies{
	workspaceSetup "gradle:gradle:0.9.1:bin@zip"
}

//tasks
task clean(type: Delete) {
	delete('build')
}

task copyFragments(dependsOn:'clean') << {
	copy {
		from 'plugins'
		into 'build/tmp/plugins/'
	}
	copy {
		from 'features'
		into 'build/tmp/features/'
	}
}

task assemble(dependsOn:'pdeUpload', type: Zip) {
	baseName = "gradle-eclipse"
	setDestinationDir(file('build/dists'))
	from('build/tmp/publish')
}


task mergeGradleDist(dependsOn:'copyFragments') << {
	String BUNDLE_CLASSPATH_PLACEHOLDER = "_BUNDLE_CLASSPATH_"
	FileTree zipContent = null
	configurations.workspaceSetup.files.each { depFile ->
		zipContent =  zipTree(depFile)
		copy {
			from(zipTree(depFile)) {
				eachFile { details ->
					details.path = details.path.substring(details.relativePath.segments[0].length())
				}
			}
		 	into 'build/tmp/plugins/org.codehaus.gradle/'
		}
	}

	String bundleClasspath = createBundleClasspath(zipContent, ",\n ")
	File manifestFile = file('build/tmp/plugins/org.codehaus.gradle/META-INF/MANIFEST.MF')

	def manifestContent = manifestFile.text
	manifestContent = manifestContent.replaceAll(BUNDLE_CLASSPATH_PLACEHOLDER, bundleClasspath)
	manifestFile.write(manifestContent)

  	bundleClasspath = createBundleClasspath(zipContent, '"/>\n','\t<classpathentry exported="true" kind="lib" path="', false)
	File classpathFile = file('build/tmp/plugins/org.codehaus.gradle/.classpath')

	def classpathContent = classpathFile.text
	classpathContent = classpathContent.replaceAll(BUNDLE_CLASSPATH_PLACEHOLDER, bundleClasspath)
	classpathFile.write(classpathContent)

}

pdeUpload.dependsOn mergeGradleDist
